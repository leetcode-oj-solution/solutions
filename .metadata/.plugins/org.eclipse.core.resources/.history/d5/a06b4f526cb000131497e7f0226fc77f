import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

/*
 * Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word.

Return all such possible sentences.

For example, given
s = "catsanddog",
dict = ["cat", "cats", "and", "sand", "dog"].

A solution is ["cats and dog", "cat sand dog"].
 */
public class Solution {
    public ArrayList<String> wordBreak(String s, Set<String> dict) {
        boolean[] canStartMatch = new boolean[s.length() + 1];
        canStartMatch[0] = true; // we can always start match against the first letter
        for (int i = 0; i < s.length(); i++) {
            if (!canStartMatch[i]) {
                // if we can't start match against this letter
                // because the letters before this point can't form a sentence
                continue;
            }
            for (String word: dict) {
                int end = i + word.length();
                if (end > s.length()) {
                    // the word will too long, impossible
                    continue;
                }
                if (canStartMatch[end]) {
                    // already possible?
                    continue;
                }
                if (s.substring(i, end).equals(word)) {
                    // a new sentence can form?
                    canStartMatch[end] = true;
                }
            }
        }
        // if finally we can match to the end of the string, we return true
        if (canStartMatch[s.length()]) {
            return wordBreakHelper(s, dict);
        } else {
            // no solution, return empty list
            return new ArrayList<String>();
        }
    }
    public ArrayList<String> wordBreakHelper(String s, Set<String> dict) {
        ArrayList<String> list = new ArrayList<String>();
        // base condition
        if (s.isEmpty()) {
            return list; // return empty list if the string is empty
        }
        for (int i = 1; i <= s.length(); i++) {
            String sub = s.substring(0, i); // the sub string
            String leftString = s.substring(i, s.length()); // the rest part
            if (dict.contains(sub)) {
                // this sub word exists
                ArrayList<String> otherWordsList = wordBreakHelper(leftString, dict);
                if (otherWordsList.isEmpty()) {
                	// nothing from the recursion
                	list.add(sub);
                } else {
                    for (String ss: otherWordsList) {
                        list.add(sub + " " + ss);
                    }                	
                }
            }
            // no such word? let's move on
        }
        return list;
    }
}